import { HttpClient } from "@angular/common/http";
import { Component, inject } from "@angular/core";
import { FormsModule, NgModel } from "@angular/forms";
import { Router } from "@angular/router";
import { CommonModule } from '@angular/common'; // Th√™m CommonModule cho *ngIf

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [FormsModule, CommonModule], // ƒê·∫£m b·∫£o FormsModule v√† CommonModule ƒë∆∞·ª£c import
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
 // ƒê√£ ƒë·ªïi styleUrl th√†nh styleUrls n·∫øu b·∫°n s·ª≠ d·ª•ng nhi·ªÅu file CSS
})
export class LoginComponent {
  user: any = {
    "username": "",
    "pass": ""
  };

  showForgotPasswordModal = false;
  showOtpModal = false;
  showResetPasswordModal = false;

  forgotEmail: string = '';
  forgotMessage: string = '';

  otpCode: string = '';
  otpMessage: string = '';

  newPassword: string = '';
  resetMessage: string = '';

  // C√°c bi·∫øn c·∫ßn thi·∫øt cho template HTML
  errorMessage: string = '';
  rememberMe: boolean = false;

  http = inject(HttpClient);
  router = inject(Router);

  onLogin() {
    // X√≥a th√¥ng b√°o l·ªói c≈©
    this.errorMessage = '';

    // Ki·ªÉm tra ƒë·∫ßu v√†o r·ªóng tr∆∞·ªõc khi g·ª≠i request
    if (!this.user.username || !this.user.pass) {
        this.errorMessage = 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n ng∆∞·ªùi d√πng v√† m·∫≠t kh·∫©u.';
        return;
    }

    this.http.post("http://localhost:8080/identity/auth/token", this.user, {
        headers: { 'Content-Type': 'application/json' }
    })
    .subscribe((res: any) => {
        if (res?.result?.authenticated) {
            alert("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!"); // C√≥ th·ªÉ thay th·∫ø b·∫±ng modal ƒë·∫πp h∆°n
            console.log("Token:", res.result.token);
            // L∆∞u token v√†o localStorage n·∫øu c·∫ßn
            localStorage.setItem("authToken", res.result.token);
            this.router.navigateByUrl('') // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang ch·ªß
        } else {
            this.errorMessage = res?.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.";
            alert(this.errorMessage); // Hi·ªÉn th·ªã th√¥ng b√°o th·∫•t b·∫°i
        }
    }, error => {
        console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
        if (error?.error?.message) {
            this.errorMessage = error.error.message; // Hi·ªÉn th·ªã l·ªói t·ª´ backend
            alert(this.errorMessage);
        } else {
            this.errorMessage = "Y√™u c·∫ßu ƒëƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.";
            alert(this.errorMessage);
        }
    });
  }
  
  // Th√™m l·∫°i c√°c h√†m ƒëi·ªÅu h∆∞·ªõng ƒë·ªÉ template HTML kh√¥ng b√°o l·ªói
  goToRegister(): void {
    console.log('Chuy·ªÉn ƒë·∫øn trang ƒëƒÉng k√Ω');
    this.router.navigate(['/register']);
  }

  openForgotPasswordModal(event: Event) {
    event.preventDefault();
    console.log("üëâ M·ªü modal qu√™n m·∫≠t kh·∫©u");
    this.showForgotPasswordModal = true;
  }

  // ƒê√≥ng modal
  closeForgotPasswordModal() {
    this.showForgotPasswordModal = false;
  }

  closeOtpModal() {
    this.showOtpModal = false;
  }

   onForgotPassword() {
    if (!this.forgotEmail) {
      this.forgotMessage = "Vui l√≤ng nh·∫≠p email.";
      return;
    }

    this.http.post(`http://localhost:8080/identity/auth/forgot-password?email=${encodeURIComponent(this.forgotEmail)}`,{})
      .subscribe({
        next: () => {
          this.forgotMessage = "";
          this.showForgotPasswordModal = false; // ƒë√≥ng modal nh·∫≠p email
          this.showOtpModal = true; // m·ªü modal OTP
        },
        error: (err) => {
          this.forgotMessage = err?.error?.message || "Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i.";
        }
      });
  }

   onVerifyOtp() {
    if (!this.otpCode) {
      this.otpMessage = "Vui l√≤ng nh·∫≠p m√£ OTP.";
      return;
    }

    this.http.post(`http://localhost:8080/identity/auth/verify-code?email=${encodeURIComponent(this.forgotEmail)}&token=${encodeURIComponent(this.otpCode)}`, {}
  ).subscribe({
      next: () => {
        this.otpMessage = "‚úÖ X√°c nh·∫≠n th√†nh c√¥ng! Gi·ªù b·∫°n c√≥ th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.";
        this.otpCode = "";
        this.showOtpModal = false;
        this.showResetPasswordModal = true;
      },
      error: (err) => {
        this.otpMessage = err?.error?.message || "M√£ OTP kh√¥ng h·ª£p l·ªá.";
      }
    });
  }

   onResetPassword() {
    if (!this.newPassword) {
      this.resetMessage = "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi.";
      return;
    }

    this.http.post<any>(
      `http://localhost:8080/identity/auth/reset-password?email=${this.forgotEmail}&newPassword=${this.newPassword}`,
      {}
    ).subscribe({
      next: () => {
        this.resetMessage = '‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!';
        setTimeout(() => {
          this.showResetPasswordModal = false;
          this.newPassword="";
        }, 1500);
      },
      error: (err) => {
        this.resetMessage = err.error?.message || 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th·∫•t b·∫°i';
      }
    });
  }
  
}
